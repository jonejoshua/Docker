/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2862.0, "minX": 0.0, "maxY": 19950.0, "series": [{"data": [[0.0, 2862.0], [0.1, 4335.0], [0.2, 4381.0], [0.3, 4381.0], [0.4, 4440.0], [0.5, 4441.0], [0.6, 4444.0], [0.7, 4452.0], [0.8, 4458.0], [0.9, 4465.0], [1.0, 4465.0], [1.1, 4470.0], [1.2, 4473.0], [1.3, 4481.0], [1.4, 4481.0], [1.5, 4481.0], [1.6, 4481.0], [1.7, 4481.0], [1.8, 4484.0], [1.9, 4498.0], [2.0, 4507.0], [2.1, 4509.0], [2.2, 4510.0], [2.3, 4512.0], [2.4, 4536.0], [2.5, 4585.0], [2.6, 4589.0], [2.7, 4627.0], [2.8, 4665.0], [2.9, 4666.0], [3.0, 4667.0], [3.1, 4667.0], [3.2, 4674.0], [3.3, 4677.0], [3.4, 4682.0], [3.5, 4686.0], [3.6, 4686.0], [3.7, 4687.0], [3.8, 4687.0], [3.9, 4688.0], [4.0, 4712.0], [4.1, 4714.0], [4.2, 4725.0], [4.3, 4725.0], [4.4, 4792.0], [4.5, 4793.0], [4.6, 4793.0], [4.7, 4885.0], [4.8, 4966.0], [4.9, 5020.0], [5.0, 5031.0], [5.1, 5073.0], [5.2, 5089.0], [5.3, 5093.0], [5.4, 5097.0], [5.5, 5100.0], [5.6, 5101.0], [5.7, 5102.0], [5.8, 5174.0], [5.9, 5189.0], [6.0, 5191.0], [6.1, 5207.0], [6.2, 5210.0], [6.3, 5212.0], [6.4, 5222.0], [6.5, 5224.0], [6.6, 5333.0], [6.7, 5333.0], [6.8, 5339.0], [6.9, 5357.0], [7.0, 5759.0], [7.1, 5778.0], [7.2, 5799.0], [7.3, 5801.0], [7.4, 5807.0], [7.5, 5817.0], [7.6, 5824.0], [7.7, 5838.0], [7.8, 5860.0], [7.9, 5888.0], [8.0, 5892.0], [8.1, 5902.0], [8.2, 5909.0], [8.3, 5916.0], [8.4, 5950.0], [8.5, 5961.0], [8.6, 5967.0], [8.7, 6005.0], [8.8, 6020.0], [8.9, 6032.0], [9.0, 6039.0], [9.1, 6047.0], [9.2, 6055.0], [9.3, 6057.0], [9.4, 6062.0], [9.5, 6063.0], [9.6, 6065.0], [9.7, 6078.0], [9.8, 6087.0], [9.9, 6098.0], [10.0, 6196.0], [10.1, 6213.0], [10.2, 6369.0], [10.3, 6379.0], [10.4, 6421.0], [10.5, 6423.0], [10.6, 6449.0], [10.7, 6451.0], [10.8, 6453.0], [10.9, 6455.0], [11.0, 6478.0], [11.1, 6486.0], [11.2, 6489.0], [11.3, 6513.0], [11.4, 6516.0], [11.5, 6517.0], [11.6, 6529.0], [11.7, 6532.0], [11.8, 6535.0], [11.9, 6554.0], [12.0, 6580.0], [12.1, 6584.0], [12.2, 6593.0], [12.3, 6594.0], [12.4, 6595.0], [12.5, 6603.0], [12.6, 6613.0], [12.7, 6618.0], [12.8, 6624.0], [12.9, 6625.0], [13.0, 6627.0], [13.1, 6637.0], [13.2, 6647.0], [13.3, 6657.0], [13.4, 6678.0], [13.5, 6722.0], [13.6, 6803.0], [13.7, 6869.0], [13.8, 6875.0], [13.9, 6876.0], [14.0, 6893.0], [14.1, 6917.0], [14.2, 6950.0], [14.3, 6969.0], [14.4, 6970.0], [14.5, 6980.0], [14.6, 7002.0], [14.7, 7002.0], [14.8, 7003.0], [14.9, 7005.0], [15.0, 7068.0], [15.1, 7069.0], [15.2, 7083.0], [15.3, 7093.0], [15.4, 7097.0], [15.5, 7174.0], [15.6, 7193.0], [15.7, 7196.0], [15.8, 7199.0], [15.9, 7212.0], [16.0, 7213.0], [16.1, 7213.0], [16.2, 7216.0], [16.3, 7223.0], [16.4, 7254.0], [16.5, 7293.0], [16.6, 7301.0], [16.7, 7398.0], [16.8, 7401.0], [16.9, 7412.0], [17.0, 7521.0], [17.1, 7523.0], [17.2, 7526.0], [17.3, 7579.0], [17.4, 7595.0], [17.5, 7595.0], [17.6, 7596.0], [17.7, 7598.0], [17.8, 7600.0], [17.9, 7616.0], [18.0, 7616.0], [18.1, 7618.0], [18.2, 7625.0], [18.3, 7632.0], [18.4, 7638.0], [18.5, 7644.0], [18.6, 7652.0], [18.7, 7653.0], [18.8, 7656.0], [18.9, 7665.0], [19.0, 7703.0], [19.1, 7703.0], [19.2, 7703.0], [19.3, 7705.0], [19.4, 7717.0], [19.5, 7721.0], [19.6, 7722.0], [19.7, 7722.0], [19.8, 7723.0], [19.9, 7739.0], [20.0, 7740.0], [20.1, 7747.0], [20.2, 7762.0], [20.3, 7778.0], [20.4, 7780.0], [20.5, 7781.0], [20.6, 7787.0], [20.7, 7797.0], [20.8, 7800.0], [20.9, 7800.0], [21.0, 7805.0], [21.1, 7806.0], [21.2, 7812.0], [21.3, 7814.0], [21.4, 7822.0], [21.5, 7824.0], [21.6, 7835.0], [21.7, 7837.0], [21.8, 7837.0], [21.9, 7840.0], [22.0, 7841.0], [22.1, 7841.0], [22.2, 7842.0], [22.3, 7843.0], [22.4, 7846.0], [22.5, 7847.0], [22.6, 7848.0], [22.7, 7852.0], [22.8, 7852.0], [22.9, 7854.0], [23.0, 7854.0], [23.1, 7854.0], [23.2, 7855.0], [23.3, 7856.0], [23.4, 7857.0], [23.5, 7864.0], [23.6, 7864.0], [23.7, 7867.0], [23.8, 7872.0], [23.9, 7876.0], [24.0, 7880.0], [24.1, 7883.0], [24.2, 7883.0], [24.3, 7885.0], [24.4, 7885.0], [24.5, 7888.0], [24.6, 7896.0], [24.7, 7950.0], [24.8, 7952.0], [24.9, 7983.0], [25.0, 7994.0], [25.1, 8003.0], [25.2, 8044.0], [25.3, 8046.0], [25.4, 8048.0], [25.5, 8097.0], [25.6, 8097.0], [25.7, 8106.0], [25.8, 8211.0], [25.9, 8286.0], [26.0, 8318.0], [26.1, 8327.0], [26.2, 8344.0], [26.3, 8348.0], [26.4, 8351.0], [26.5, 8354.0], [26.6, 8363.0], [26.7, 8368.0], [26.8, 8373.0], [26.9, 8374.0], [27.0, 8398.0], [27.1, 8407.0], [27.2, 8430.0], [27.3, 8479.0], [27.4, 8482.0], [27.5, 8491.0], [27.6, 8493.0], [27.7, 8495.0], [27.8, 8535.0], [27.9, 8536.0], [28.0, 8536.0], [28.1, 8553.0], [28.2, 8556.0], [28.3, 8563.0], [28.4, 8568.0], [28.5, 8589.0], [28.6, 8662.0], [28.7, 8664.0], [28.8, 8665.0], [28.9, 8669.0], [29.0, 8675.0], [29.1, 8697.0], [29.2, 8704.0], [29.3, 8715.0], [29.4, 8728.0], [29.5, 8752.0], [29.6, 8772.0], [29.7, 8775.0], [29.8, 8777.0], [29.9, 8792.0], [30.0, 8799.0], [30.1, 8803.0], [30.2, 8807.0], [30.3, 8810.0], [30.4, 8812.0], [30.5, 8832.0], [30.6, 8832.0], [30.7, 8834.0], [30.8, 8855.0], [30.9, 8861.0], [31.0, 8869.0], [31.1, 8871.0], [31.2, 8875.0], [31.3, 8879.0], [31.4, 8882.0], [31.5, 8885.0], [31.6, 8892.0], [31.7, 8892.0], [31.8, 8896.0], [31.9, 8908.0], [32.0, 8924.0], [32.1, 8932.0], [32.2, 8937.0], [32.3, 8984.0], [32.4, 9022.0], [32.5, 9024.0], [32.6, 9029.0], [32.7, 9045.0], [32.8, 9056.0], [32.9, 9101.0], [33.0, 9110.0], [33.1, 9116.0], [33.2, 9118.0], [33.3, 9126.0], [33.4, 9134.0], [33.5, 9140.0], [33.6, 9213.0], [33.7, 9307.0], [33.8, 9404.0], [33.9, 9409.0], [34.0, 9430.0], [34.1, 9436.0], [34.2, 9477.0], [34.3, 9484.0], [34.4, 9492.0], [34.5, 9526.0], [34.6, 9549.0], [34.7, 9574.0], [34.8, 9598.0], [34.9, 9623.0], [35.0, 9626.0], [35.1, 9643.0], [35.2, 9645.0], [35.3, 9647.0], [35.4, 9648.0], [35.5, 9651.0], [35.6, 9687.0], [35.7, 9691.0], [35.8, 9699.0], [35.9, 9731.0], [36.0, 9737.0], [36.1, 9748.0], [36.2, 9755.0], [36.3, 9774.0], [36.4, 9800.0], [36.5, 9800.0], [36.6, 9801.0], [36.7, 9805.0], [36.8, 9820.0], [36.9, 9840.0], [37.0, 9845.0], [37.1, 9846.0], [37.2, 9848.0], [37.3, 9851.0], [37.4, 9866.0], [37.5, 9872.0], [37.6, 9876.0], [37.7, 9905.0], [37.8, 9906.0], [37.9, 9911.0], [38.0, 9932.0], [38.1, 9951.0], [38.2, 9958.0], [38.3, 9959.0], [38.4, 9961.0], [38.5, 9962.0], [38.6, 9964.0], [38.7, 9991.0], [38.8, 10009.0], [38.9, 10011.0], [39.0, 10032.0], [39.1, 10033.0], [39.2, 10038.0], [39.3, 10057.0], [39.4, 10077.0], [39.5, 10110.0], [39.6, 10116.0], [39.7, 10144.0], [39.8, 10205.0], [39.9, 10208.0], [40.0, 10216.0], [40.1, 10227.0], [40.2, 10238.0], [40.3, 10241.0], [40.4, 10244.0], [40.5, 10248.0], [40.6, 10257.0], [40.7, 10277.0], [40.8, 10284.0], [40.9, 10326.0], [41.0, 10328.0], [41.1, 10358.0], [41.2, 10384.0], [41.3, 10385.0], [41.4, 10387.0], [41.5, 10398.0], [41.6, 10403.0], [41.7, 10406.0], [41.8, 10416.0], [41.9, 10417.0], [42.0, 10423.0], [42.1, 10435.0], [42.2, 10457.0], [42.3, 10467.0], [42.4, 10521.0], [42.5, 10534.0], [42.6, 10537.0], [42.7, 10559.0], [42.8, 10562.0], [42.9, 10574.0], [43.0, 10653.0], [43.1, 10669.0], [43.2, 10675.0], [43.3, 10693.0], [43.4, 10736.0], [43.5, 10798.0], [43.6, 10811.0], [43.7, 10851.0], [43.8, 10905.0], [43.9, 10917.0], [44.0, 11017.0], [44.1, 11029.0], [44.2, 11037.0], [44.3, 11054.0], [44.4, 11055.0], [44.5, 11066.0], [44.6, 11068.0], [44.7, 11070.0], [44.8, 11081.0], [44.9, 11085.0], [45.0, 11087.0], [45.1, 11095.0], [45.2, 11100.0], [45.3, 11113.0], [45.4, 11133.0], [45.5, 11134.0], [45.6, 11143.0], [45.7, 11163.0], [45.8, 11184.0], [45.9, 11210.0], [46.0, 11233.0], [46.1, 11323.0], [46.2, 11344.0], [46.3, 11351.0], [46.4, 11403.0], [46.5, 11415.0], [46.6, 11422.0], [46.7, 11460.0], [46.8, 11509.0], [46.9, 11529.0], [47.0, 11531.0], [47.1, 11537.0], [47.2, 11556.0], [47.3, 11573.0], [47.4, 11597.0], [47.5, 11615.0], [47.6, 11627.0], [47.7, 11648.0], [47.8, 11658.0], [47.9, 11664.0], [48.0, 11679.0], [48.1, 11687.0], [48.2, 11700.0], [48.3, 11702.0], [48.4, 11706.0], [48.5, 11718.0], [48.6, 11741.0], [48.7, 11749.0], [48.8, 11752.0], [48.9, 11754.0], [49.0, 11765.0], [49.1, 11769.0], [49.2, 11770.0], [49.3, 11771.0], [49.4, 11779.0], [49.5, 11782.0], [49.6, 11786.0], [49.7, 11791.0], [49.8, 11792.0], [49.9, 11792.0], [50.0, 11794.0], [50.1, 11794.0], [50.2, 11796.0], [50.3, 11805.0], [50.4, 11906.0], [50.5, 11910.0], [50.6, 11936.0], [50.7, 11951.0], [50.8, 11977.0], [50.9, 12007.0], [51.0, 12009.0], [51.1, 12018.0], [51.2, 12024.0], [51.3, 12034.0], [51.4, 12038.0], [51.5, 12039.0], [51.6, 12041.0], [51.7, 12043.0], [51.8, 12045.0], [51.9, 12054.0], [52.0, 12062.0], [52.1, 12085.0], [52.2, 12090.0], [52.3, 12095.0], [52.4, 12101.0], [52.5, 12112.0], [52.6, 12116.0], [52.7, 12126.0], [52.8, 12129.0], [52.9, 12133.0], [53.0, 12144.0], [53.1, 12151.0], [53.2, 12161.0], [53.3, 12163.0], [53.4, 12201.0], [53.5, 12205.0], [53.6, 12208.0], [53.7, 12233.0], [53.8, 12301.0], [53.9, 12319.0], [54.0, 12331.0], [54.1, 12376.0], [54.2, 12381.0], [54.3, 12398.0], [54.4, 12410.0], [54.5, 12411.0], [54.6, 12412.0], [54.7, 12416.0], [54.8, 12430.0], [54.9, 12433.0], [55.0, 12438.0], [55.1, 12456.0], [55.2, 12459.0], [55.3, 12462.0], [55.4, 12486.0], [55.5, 12487.0], [55.6, 12488.0], [55.7, 12502.0], [55.8, 12517.0], [55.9, 12517.0], [56.0, 12526.0], [56.1, 12532.0], [56.2, 12537.0], [56.3, 12539.0], [56.4, 12539.0], [56.5, 12544.0], [56.6, 12546.0], [56.7, 12550.0], [56.8, 12551.0], [56.9, 12570.0], [57.0, 12578.0], [57.1, 12600.0], [57.2, 12603.0], [57.3, 12610.0], [57.4, 12623.0], [57.5, 12628.0], [57.6, 12634.0], [57.7, 12636.0], [57.8, 12652.0], [57.9, 12668.0], [58.0, 12672.0], [58.1, 12675.0], [58.2, 12741.0], [58.3, 12749.0], [58.4, 12754.0], [58.5, 12755.0], [58.6, 12756.0], [58.7, 12765.0], [58.8, 12765.0], [58.9, 12771.0], [59.0, 12777.0], [59.1, 12783.0], [59.2, 12784.0], [59.3, 12789.0], [59.4, 12805.0], [59.5, 12831.0], [59.6, 12844.0], [59.7, 12850.0], [59.8, 12859.0], [59.9, 12860.0], [60.0, 12861.0], [60.1, 12862.0], [60.2, 12864.0], [60.3, 12871.0], [60.4, 12873.0], [60.5, 12876.0], [60.6, 12888.0], [60.7, 12915.0], [60.8, 12916.0], [60.9, 12928.0], [61.0, 12929.0], [61.1, 12936.0], [61.2, 12937.0], [61.3, 12942.0], [61.4, 12944.0], [61.5, 12951.0], [61.6, 12958.0], [61.7, 12971.0], [61.8, 12979.0], [61.9, 13007.0], [62.0, 13017.0], [62.1, 13026.0], [62.2, 13031.0], [62.3, 13044.0], [62.4, 13046.0], [62.5, 13049.0], [62.6, 13085.0], [62.7, 13086.0], [62.8, 13126.0], [62.9, 13135.0], [63.0, 13141.0], [63.1, 13146.0], [63.2, 13305.0], [63.3, 13315.0], [63.4, 13316.0], [63.5, 13333.0], [63.6, 13361.0], [63.7, 13362.0], [63.8, 13363.0], [63.9, 13369.0], [64.0, 13374.0], [64.1, 13381.0], [64.2, 13385.0], [64.3, 13394.0], [64.4, 13397.0], [64.5, 13399.0], [64.6, 13400.0], [64.7, 13401.0], [64.8, 13405.0], [64.9, 13412.0], [65.0, 13415.0], [65.1, 13419.0], [65.2, 13428.0], [65.3, 13430.0], [65.4, 13438.0], [65.5, 13438.0], [65.6, 13439.0], [65.7, 13440.0], [65.8, 13446.0], [65.9, 13447.0], [66.0, 13448.0], [66.1, 13454.0], [66.2, 13456.0], [66.3, 13456.0], [66.4, 13463.0], [66.5, 13477.0], [66.6, 13477.0], [66.7, 13478.0], [66.8, 13482.0], [66.9, 13485.0], [67.0, 13486.0], [67.1, 13498.0], [67.2, 13503.0], [67.3, 13522.0], [67.4, 13522.0], [67.5, 13522.0], [67.6, 13524.0], [67.7, 13533.0], [67.8, 13543.0], [67.9, 13545.0], [68.0, 13545.0], [68.1, 13550.0], [68.2, 13557.0], [68.3, 13562.0], [68.4, 13595.0], [68.5, 13614.0], [68.6, 13619.0], [68.7, 13645.0], [68.8, 13652.0], [68.9, 13704.0], [69.0, 13712.0], [69.1, 13724.0], [69.2, 13725.0], [69.3, 13728.0], [69.4, 13732.0], [69.5, 13744.0], [69.6, 13747.0], [69.7, 13752.0], [69.8, 13758.0], [69.9, 13781.0], [70.0, 13786.0], [70.1, 13814.0], [70.2, 13823.0], [70.3, 13824.0], [70.4, 13840.0], [70.5, 13860.0], [70.6, 13878.0], [70.7, 13887.0], [70.8, 13908.0], [70.9, 13947.0], [71.0, 13947.0], [71.1, 13953.0], [71.2, 13956.0], [71.3, 13958.0], [71.4, 13963.0], [71.5, 13975.0], [71.6, 13984.0], [71.7, 13987.0], [71.8, 14004.0], [71.9, 14036.0], [72.0, 14077.0], [72.1, 14094.0], [72.2, 14108.0], [72.3, 14191.0], [72.4, 14192.0], [72.5, 14200.0], [72.6, 14269.0], [72.7, 14286.0], [72.8, 14370.0], [72.9, 14383.0], [73.0, 14403.0], [73.1, 14404.0], [73.2, 14409.0], [73.3, 14436.0], [73.4, 14447.0], [73.5, 14455.0], [73.6, 14463.0], [73.7, 14481.0], [73.8, 14484.0], [73.9, 14501.0], [74.0, 14513.0], [74.1, 14610.0], [74.2, 14612.0], [74.3, 14646.0], [74.4, 14735.0], [74.5, 14773.0], [74.6, 14778.0], [74.7, 14783.0], [74.8, 14787.0], [74.9, 14791.0], [75.0, 14797.0], [75.1, 14798.0], [75.2, 14899.0], [75.3, 14906.0], [75.4, 14956.0], [75.5, 14964.0], [75.6, 14970.0], [75.7, 14975.0], [75.8, 14976.0], [75.9, 14976.0], [76.0, 15047.0], [76.1, 15049.0], [76.2, 15056.0], [76.3, 15071.0], [76.4, 15083.0], [76.5, 15095.0], [76.6, 15113.0], [76.7, 15123.0], [76.8, 15135.0], [76.9, 15137.0], [77.0, 15139.0], [77.1, 15152.0], [77.2, 15160.0], [77.3, 15164.0], [77.4, 15167.0], [77.5, 15172.0], [77.6, 15174.0], [77.7, 15194.0], [77.8, 15201.0], [77.9, 15215.0], [78.0, 15216.0], [78.1, 15228.0], [78.2, 15237.0], [78.3, 15239.0], [78.4, 15249.0], [78.5, 15271.0], [78.6, 15273.0], [78.7, 15281.0], [78.8, 15323.0], [78.9, 15333.0], [79.0, 15334.0], [79.1, 15337.0], [79.2, 15339.0], [79.3, 15349.0], [79.4, 15354.0], [79.5, 15356.0], [79.6, 15357.0], [79.7, 15358.0], [79.8, 15365.0], [79.9, 15372.0], [80.0, 15374.0], [80.1, 15386.0], [80.2, 15390.0], [80.3, 15391.0], [80.4, 15392.0], [80.5, 15399.0], [80.6, 15400.0], [80.7, 15406.0], [80.8, 15411.0], [80.9, 15412.0], [81.0, 15414.0], [81.1, 15414.0], [81.2, 15418.0], [81.3, 15432.0], [81.4, 15432.0], [81.5, 15435.0], [81.6, 15441.0], [81.7, 15452.0], [81.8, 15468.0], [81.9, 15506.0], [82.0, 15518.0], [82.1, 15521.0], [82.2, 15533.0], [82.3, 15540.0], [82.4, 15543.0], [82.5, 15545.0], [82.6, 15547.0], [82.7, 15549.0], [82.8, 15557.0], [82.9, 15559.0], [83.0, 15563.0], [83.1, 15564.0], [83.2, 15567.0], [83.3, 15577.0], [83.4, 15596.0], [83.5, 15597.0], [83.6, 15612.0], [83.7, 15635.0], [83.8, 15649.0], [83.9, 15650.0], [84.0, 15659.0], [84.1, 15663.0], [84.2, 15670.0], [84.3, 15679.0], [84.4, 15699.0], [84.5, 15716.0], [84.6, 15720.0], [84.7, 15720.0], [84.8, 15724.0], [84.9, 15725.0], [85.0, 15735.0], [85.1, 15735.0], [85.2, 15736.0], [85.3, 15738.0], [85.4, 15739.0], [85.5, 15745.0], [85.6, 15759.0], [85.7, 15763.0], [85.8, 15773.0], [85.9, 15773.0], [86.0, 15784.0], [86.1, 15793.0], [86.2, 15806.0], [86.3, 15807.0], [86.4, 15818.0], [86.5, 15824.0], [86.6, 15826.0], [86.7, 15839.0], [86.8, 15839.0], [86.9, 15841.0], [87.0, 15864.0], [87.1, 15867.0], [87.2, 15877.0], [87.3, 15896.0], [87.4, 15898.0], [87.5, 15907.0], [87.6, 15933.0], [87.7, 15935.0], [87.8, 15945.0], [87.9, 15947.0], [88.0, 15949.0], [88.1, 15953.0], [88.2, 15956.0], [88.3, 15963.0], [88.4, 15966.0], [88.5, 15973.0], [88.6, 15973.0], [88.7, 15990.0], [88.8, 15995.0], [88.9, 16004.0], [89.0, 16007.0], [89.1, 16011.0], [89.2, 16020.0], [89.3, 16032.0], [89.4, 16034.0], [89.5, 16038.0], [89.6, 16048.0], [89.7, 16048.0], [89.8, 16049.0], [89.9, 16052.0], [90.0, 16054.0], [90.1, 16056.0], [90.2, 16059.0], [90.3, 16062.0], [90.4, 16064.0], [90.5, 16073.0], [90.6, 16075.0], [90.7, 16080.0], [90.8, 16080.0], [90.9, 16082.0], [91.0, 16091.0], [91.1, 16094.0], [91.2, 16100.0], [91.3, 16100.0], [91.4, 16103.0], [91.5, 16104.0], [91.6, 16135.0], [91.7, 16136.0], [91.8, 16138.0], [91.9, 16147.0], [92.0, 16157.0], [92.1, 16163.0], [92.2, 16312.0], [92.3, 16325.0], [92.4, 16435.0], [92.5, 16438.0], [92.6, 16457.0], [92.7, 16505.0], [92.8, 16606.0], [92.9, 16669.0], [93.0, 16671.0], [93.1, 16686.0], [93.2, 16687.0], [93.3, 16727.0], [93.4, 16737.0], [93.5, 16747.0], [93.6, 16792.0], [93.7, 16914.0], [93.8, 16933.0], [93.9, 16943.0], [94.0, 16966.0], [94.1, 16985.0], [94.2, 17144.0], [94.3, 17306.0], [94.4, 17334.0], [94.5, 17380.0], [94.6, 17398.0], [94.7, 17400.0], [94.8, 17410.0], [94.9, 17451.0], [95.0, 17483.0], [95.1, 17515.0], [95.2, 17555.0], [95.3, 17558.0], [95.4, 17570.0], [95.5, 17578.0], [95.6, 17602.0], [95.7, 17603.0], [95.8, 17615.0], [95.9, 17623.0], [96.0, 17656.0], [96.1, 17665.0], [96.2, 17668.0], [96.3, 17713.0], [96.4, 17725.0], [96.5, 17735.0], [96.6, 17737.0], [96.7, 17749.0], [96.8, 17888.0], [96.9, 18134.0], [97.0, 18178.0], [97.1, 18234.0], [97.2, 18251.0], [97.3, 18259.0], [97.4, 18278.0], [97.5, 18294.0], [97.6, 18296.0], [97.7, 18395.0], [97.8, 18423.0], [97.9, 18445.0], [98.0, 18451.0], [98.1, 18488.0], [98.2, 18564.0], [98.3, 18877.0], [98.4, 18900.0], [98.5, 18908.0], [98.6, 18922.0], [98.7, 18943.0], [98.8, 18969.0], [98.9, 18971.0], [99.0, 18975.0], [99.1, 18980.0], [99.2, 19039.0], [99.3, 19058.0], [99.4, 19075.0], [99.5, 19383.0], [99.6, 19412.0], [99.7, 19499.0], [99.8, 19927.0], [99.9, 19950.0]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 2800.0, "maxY": 39.0, "series": [{"data": [[2800.0, 1.0], [4300.0, 2.0], [4600.0, 13.0], [4400.0, 16.0], [4500.0, 7.0], [4700.0, 7.0], [4800.0, 1.0], [5100.0, 6.0], [5000.0, 6.0], [4900.0, 2.0], [5300.0, 4.0], [5200.0, 5.0], [5800.0, 8.0], [5700.0, 3.0], [6100.0, 1.0], [5900.0, 6.0], [6000.0, 13.0], [6300.0, 2.0], [6200.0, 1.0], [6600.0, 10.0], [6500.0, 12.0], [6400.0, 9.0], [6700.0, 1.0], [6800.0, 5.0], [6900.0, 5.0], [7000.0, 9.0], [7100.0, 4.0], [7200.0, 7.0], [7400.0, 2.0], [7300.0, 2.0], [7500.0, 8.0], [7600.0, 12.0], [7900.0, 4.0], [7800.0, 39.0], [7700.0, 17.0], [8000.0, 6.0], [8100.0, 1.0], [8300.0, 11.0], [8600.0, 6.0], [8700.0, 9.0], [8400.0, 7.0], [8500.0, 8.0], [8200.0, 2.0], [8800.0, 18.0], [9200.0, 1.0], [9100.0, 7.0], [9000.0, 5.0], [8900.0, 5.0], [9400.0, 7.0], [9300.0, 1.0], [9600.0, 10.0], [9500.0, 4.0], [9700.0, 5.0], [9800.0, 13.0], [9900.0, 11.0], [10000.0, 7.0], [10200.0, 11.0], [10100.0, 3.0], [10500.0, 6.0], [10300.0, 7.0], [10400.0, 8.0], [10700.0, 2.0], [10600.0, 4.0], [11100.0, 7.0], [11200.0, 2.0], [10900.0, 2.0], [11000.0, 12.0], [10800.0, 2.0], [11300.0, 3.0], [11400.0, 4.0], [11500.0, 7.0], [11600.0, 7.0], [11700.0, 21.0], [11900.0, 5.0], [12100.0, 10.0], [12000.0, 15.0], [12200.0, 4.0], [11800.0, 1.0], [12300.0, 6.0], [12400.0, 13.0], [12500.0, 14.0], [12600.0, 11.0], [12700.0, 12.0], [12800.0, 13.0], [12900.0, 12.0], [13300.0, 14.0], [13000.0, 9.0], [13100.0, 4.0], [13400.0, 26.0], [13500.0, 13.0], [13700.0, 12.0], [13600.0, 4.0], [13800.0, 7.0], [13900.0, 10.0], [14100.0, 3.0], [14000.0, 4.0], [14200.0, 3.0], [14300.0, 2.0], [14400.0, 9.0], [14600.0, 3.0], [14800.0, 1.0], [14700.0, 8.0], [14500.0, 2.0], [14900.0, 8.0], [15100.0, 12.0], [15200.0, 10.0], [15300.0, 18.0], [15000.0, 6.0], [15400.0, 13.0], [15500.0, 17.0], [15600.0, 9.0], [15700.0, 17.0], [15800.0, 13.0], [15900.0, 14.0], [16300.0, 2.0], [16100.0, 10.0], [16000.0, 23.0], [16400.0, 3.0], [16600.0, 5.0], [16700.0, 4.0], [16900.0, 5.0], [17300.0, 4.0], [16500.0, 1.0], [17400.0, 4.0], [17100.0, 1.0], [17500.0, 5.0], [17600.0, 7.0], [17700.0, 5.0], [17800.0, 1.0], [18100.0, 2.0], [18200.0, 6.0], [18300.0, 1.0], [18400.0, 4.0], [18500.0, 1.0], [18900.0, 8.0], [18800.0, 1.0], [19000.0, 3.0], [19400.0, 2.0], [19300.0, 1.0], [19900.0, 2.0]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 19900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1000.0, "minX": 2.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1000.0, "series": [{"data": [], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1000.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 394.2510000000001, "minX": 1.76053086E12, "maxY": 394.2510000000001, "series": [{"data": [[1.76053086E12, 394.2510000000001]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76053086E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2862.0, "minX": 23.0, "maxY": 17602.0, "series": [{"data": [[23.0, 2862.0], [28.0, 5817.0], [31.0, 5860.0], [39.0, 7618.0], [47.0, 7616.0], [46.0, 7595.0], [49.0, 7598.0], [48.0, 9876.0], [51.0, 9197.0], [50.0, 7616.0], [52.0, 7632.0], [61.0, 7724.166666666666], [63.0, 7778.0], [64.0, 7842.0], [67.0, 7852.0], [71.0, 7841.0], [69.0, 7856.0], [70.0, 7849.0], [74.0, 7857.0], [79.0, 7867.0], [78.0, 7864.0], [81.0, 7852.0], [80.0, 7855.0], [87.0, 7953.75], [91.0, 7848.0], [88.0, 7847.0], [93.0, 7872.0], [92.0, 7854.0], [99.0, 7950.0], [103.0, 7885.0], [102.0, 7883.0], [101.0, 7885.0], [100.0, 7876.0], [104.0, 7880.0], [106.0, 7994.0], [110.0, 7883.0], [119.0, 6047.0], [123.0, 8047.0], [127.0, 7523.0], [125.0, 7526.0], [124.0, 8044.0], [135.0, 5838.0], [134.0, 5824.0], [133.0, 5799.0], [132.0, 5807.0], [131.0, 5892.0], [130.0, 5759.0], [129.0, 6618.0], [128.0, 7521.0], [139.0, 5789.5], [137.0, 6020.0], [141.0, 15874.272727272728], [142.0, 13019.0], [143.0, 17602.0], [144.0, 10048.75], [167.0, 4666.0], [166.0, 4667.0], [165.0, 4465.0], [164.0, 5521.686567164182], [174.0, 4714.0], [173.0, 4627.0], [171.0, 4667.0], [170.0, 4725.0], [169.0, 15557.0], [168.0, 4441.0], [183.0, 4686.0], [182.0, 4686.0], [180.0, 6529.0], [179.0, 4674.0], [178.0, 4682.0], [177.0, 6532.0], [176.0, 6535.0], [189.0, 4793.0], [188.0, 4712.0], [186.0, 4687.0], [185.0, 4688.0], [184.0, 4687.0], [199.0, 14694.6875], [193.0, 6613.0], [192.0, 6678.0], [195.0, 6925.4285714285725], [207.0, 13814.0], [202.0, 13781.0], [201.0, 13786.0], [200.0, 13824.0], [215.0, 13744.0], [214.0, 13728.0], [213.0, 13747.0], [212.0, 14463.0], [211.0, 13652.0], [209.0, 13823.0], [221.0, 6453.0], [220.0, 13454.0], [218.0, 5902.0], [217.0, 13645.0], [226.0, 13619.0], [224.0, 5909.0], [236.0, 13549.0], [246.0, 6369.0], [244.0, 6308.5], [243.0, 5950.0], [242.0, 5888.0], [241.0, 5916.0], [240.0, 5967.0], [271.0, 6657.0], [270.0, 6584.0], [265.0, 13381.0], [264.0, 10662.5], [262.0, 9795.0], [259.0, 13374.0], [266.0, 9170.2], [287.0, 9827.0], [284.0, 6627.0], [283.0, 13026.0], [282.0, 6637.0], [281.0, 6593.0], [279.0, 13046.0], [277.0, 6603.0], [276.0, 6595.0], [273.0, 6594.0], [272.0, 6580.0], [290.0, 7005.0], [302.0, 7093.0], [300.0, 7097.0], [299.0, 16134.0], [297.0, 10693.0], [296.0, 12861.0], [295.0, 12869.0], [292.0, 7002.0], [289.0, 7003.0], [288.0, 7002.0], [319.0, 7174.0], [318.0, 12673.5], [316.0, 12752.0], [314.0, 12747.5], [308.0, 7216.0], [306.0, 9980.5], [305.0, 7193.0], [335.0, 7301.0], [332.0, 7212.0], [334.0, 7716.2], [322.0, 7401.0], [321.0, 12652.0], [320.0, 7703.0], [331.0, 7213.0], [330.0, 7213.0], [329.0, 7199.0], [328.0, 12570.0], [327.0, 7398.0], [326.0, 7644.0], [325.0, 7625.0], [351.0, 7720.333333333333], [348.0, 7739.0], [346.0, 7665.0], [342.0, 12532.0], [341.0, 12517.0], [340.0, 7600.0], [338.0, 10139.5], [336.0, 7412.0], [365.0, 12410.0], [367.0, 12304.5], [364.0, 12381.0], [363.0, 12430.0], [362.0, 12416.0], [361.0, 12433.0], [360.0, 7888.0], [359.0, 12410.0], [353.0, 12603.0], [382.0, 12085.0], [376.0, 12116.0], [371.0, 12156.0], [370.0, 12398.0], [397.0, 7824.0], [399.0, 10611.0], [396.0, 9911.5], [393.0, 12034.0], [390.0, 10675.0], [389.0, 12038.0], [388.0, 12043.0], [387.0, 12053.5], [386.0, 12095.0], [414.0, 11017.0], [415.0, 7953.0], [413.0, 10851.0], [412.0, 10905.0], [411.0, 7806.0], [409.0, 11068.0], [408.0, 7787.0], [407.0, 11070.0], [401.0, 11849.0], [400.0, 10556.333333333334], [403.0, 7835.0], [402.0, 11395.235294117647], [406.0, 11037.0], [404.0, 7837.0], [431.0, 8535.0], [428.0, 11805.0], [427.0, 11749.0], [426.0, 11556.0], [424.0, 11573.0], [417.0, 10811.0], [416.0, 7797.0], [447.0, 10559.0], [440.0, 7132.5], [446.0, 8430.0], [445.0, 8675.0], [444.0, 10562.0], [433.0, 8003.0], [432.0, 11615.0], [443.0, 10534.0], [442.0, 8493.0], [441.0, 8896.0], [439.0, 8665.0], [437.0, 10653.0], [436.0, 10669.0], [457.0, 9788.333333333334], [454.0, 8563.0], [453.0, 10529.0], [451.0, 8553.0], [449.0, 8568.0], [458.0, 8664.0], [459.0, 8595.666666666666], [461.0, 8667.5], [478.0, 12462.0], [471.0, 8468.0], [479.0, 12871.0], [477.0, 9032.666666666666], [476.0, 9991.0], [475.0, 10116.0], [474.0, 10077.0], [472.0, 9056.0], [470.0, 9005.0], [468.0, 8715.0], [469.0, 9631.35483870968], [492.0, 12862.0], [495.0, 12929.0], [494.0, 12873.0], [493.0, 12859.0], [491.0, 13172.8], [488.0, 12783.0], [487.0, 12777.0], [481.0, 12487.0], [483.0, 12456.0], [482.0, 12459.0], [486.0, 12526.0], [485.0, 12971.0], [484.0, 12786.5], [499.0, 14721.622222222222], [500.0, 13580.289655172417], [498.0, 13459.64705882353], [497.0, 12578.0], [496.0, 14954.0]], "isOverall": false, "label": "Submit Form", "isController": false}, {"data": [[394.2510000000001, 11450.891000000009]], "isOverall": false, "label": "Submit Form-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 500.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4666.666666666667, "minX": 1.76053086E12, "maxY": 4883.333333333333, "series": [{"data": [[1.76053086E12, 4666.666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.76053086E12, 4883.333333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76053086E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 11450.891000000009, "minX": 1.76053086E12, "maxY": 11450.891000000009, "series": [{"data": [[1.76053086E12, 11450.891000000009]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76053086E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 11448.575000000006, "minX": 1.76053086E12, "maxY": 11448.575000000006, "series": [{"data": [[1.76053086E12, 11448.575000000006]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76053086E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 603.4030000000006, "minX": 1.76053086E12, "maxY": 603.4030000000006, "series": [{"data": [[1.76053086E12, 603.4030000000006]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76053086E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2862.0, "minX": 1.76053086E12, "maxY": 19950.0, "series": [{"data": [[1.76053086E12, 19950.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.76053086E12, 16053.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.76053086E12, 18974.96]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.76053086E12, 17481.399999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.76053086E12, 2862.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.76053086E12, 11794.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76053086E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 4997.0, "minX": 1.0, "maxY": 18409.0, "series": [{"data": [[2.0, 8139.5], [32.0, 11614.0], [36.0, 14406.5], [38.0, 18409.0], [45.0, 11415.0], [195.0, 11741.0], [51.0, 13397.0], [55.0, 15521.0], [56.0, 15784.5], [58.0, 13352.0], [1.0, 5709.5], [17.0, 6980.0], [18.0, 8762.0], [85.0, 7854.0], [23.0, 16163.0], [95.0, 4997.0], [102.0, 9117.0], [28.0, 17564.0], [30.0, 12523.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 195.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 4997.0, "minX": 1.0, "maxY": 18409.0, "series": [{"data": [[2.0, 8139.5], [32.0, 11613.5], [36.0, 14406.5], [38.0, 18409.0], [45.0, 11415.0], [195.0, 11741.0], [51.0, 13396.0], [55.0, 15521.0], [56.0, 15784.5], [58.0, 13351.5], [1.0, 5158.5], [17.0, 6980.0], [18.0, 8762.0], [85.0, 7854.0], [23.0, 16162.0], [95.0, 4997.0], [102.0, 9117.0], [28.0, 17564.0], [30.0, 12523.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 195.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.76053086E12, "maxY": 16.666666666666668, "series": [{"data": [[1.76053086E12, 16.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76053086E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.76053086E12, "maxY": 16.666666666666668, "series": [{"data": [[1.76053086E12, 16.666666666666668]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.76053086E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.76053086E12, "maxY": 16.666666666666668, "series": [{"data": [[1.76053086E12, 16.666666666666668]], "isOverall": false, "label": "Submit Form-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76053086E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.76053086E12, "maxY": 16.666666666666668, "series": [{"data": [[1.76053086E12, 16.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.76053086E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

