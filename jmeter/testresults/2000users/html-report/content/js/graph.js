/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 12232.0, "series": [{"data": [[0.0, 1.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 2.0], [0.5, 3.0], [0.6, 3.0], [0.7, 3.0], [0.8, 4.0], [0.9, 4.0], [1.0, 4.0], [1.1, 5.0], [1.2, 5.0], [1.3, 5.0], [1.4, 6.0], [1.5, 6.0], [1.6, 6.0], [1.7, 6.0], [1.8, 6.0], [1.9, 7.0], [2.0, 7.0], [2.1, 7.0], [2.2, 8.0], [2.3, 8.0], [2.4, 8.0], [2.5, 8.0], [2.6, 9.0], [2.7, 9.0], [2.8, 9.0], [2.9, 9.0], [3.0, 10.0], [3.1, 10.0], [3.2, 10.0], [3.3, 10.0], [3.4, 11.0], [3.5, 11.0], [3.6, 11.0], [3.7, 12.0], [3.8, 12.0], [3.9, 12.0], [4.0, 12.0], [4.1, 12.0], [4.2, 13.0], [4.3, 13.0], [4.4, 14.0], [4.5, 14.0], [4.6, 14.0], [4.7, 14.0], [4.8, 14.0], [4.9, 15.0], [5.0, 15.0], [5.1, 15.0], [5.2, 16.0], [5.3, 16.0], [5.4, 16.0], [5.5, 16.0], [5.6, 16.0], [5.7, 17.0], [5.8, 17.0], [5.9, 17.0], [6.0, 17.0], [6.1, 17.0], [6.2, 18.0], [6.3, 18.0], [6.4, 18.0], [6.5, 18.0], [6.6, 19.0], [6.7, 19.0], [6.8, 19.0], [6.9, 19.0], [7.0, 19.0], [7.1, 19.0], [7.2, 19.0], [7.3, 20.0], [7.4, 20.0], [7.5, 20.0], [7.6, 20.0], [7.7, 20.0], [7.8, 21.0], [7.9, 21.0], [8.0, 21.0], [8.1, 21.0], [8.2, 21.0], [8.3, 22.0], [8.4, 22.0], [8.5, 22.0], [8.6, 22.0], [8.7, 22.0], [8.8, 22.0], [8.9, 23.0], [9.0, 23.0], [9.1, 23.0], [9.2, 23.0], [9.3, 23.0], [9.4, 23.0], [9.5, 24.0], [9.6, 24.0], [9.7, 24.0], [9.8, 24.0], [9.9, 24.0], [10.0, 25.0], [10.1, 25.0], [10.2, 25.0], [10.3, 26.0], [10.4, 26.0], [10.5, 26.0], [10.6, 26.0], [10.7, 26.0], [10.8, 26.0], [10.9, 27.0], [11.0, 27.0], [11.1, 27.0], [11.2, 27.0], [11.3, 27.0], [11.4, 28.0], [11.5, 28.0], [11.6, 28.0], [11.7, 28.0], [11.8, 29.0], [11.9, 29.0], [12.0, 29.0], [12.1, 29.0], [12.2, 30.0], [12.3, 30.0], [12.4, 30.0], [12.5, 30.0], [12.6, 31.0], [12.7, 31.0], [12.8, 31.0], [12.9, 31.0], [13.0, 31.0], [13.1, 32.0], [13.2, 32.0], [13.3, 32.0], [13.4, 32.0], [13.5, 32.0], [13.6, 33.0], [13.7, 33.0], [13.8, 33.0], [13.9, 33.0], [14.0, 33.0], [14.1, 33.0], [14.2, 33.0], [14.3, 34.0], [14.4, 34.0], [14.5, 34.0], [14.6, 34.0], [14.7, 34.0], [14.8, 35.0], [14.9, 35.0], [15.0, 35.0], [15.1, 35.0], [15.2, 36.0], [15.3, 36.0], [15.4, 36.0], [15.5, 36.0], [15.6, 36.0], [15.7, 36.0], [15.8, 36.0], [15.9, 37.0], [16.0, 37.0], [16.1, 37.0], [16.2, 37.0], [16.3, 37.0], [16.4, 37.0], [16.5, 37.0], [16.6, 38.0], [16.7, 38.0], [16.8, 38.0], [16.9, 38.0], [17.0, 38.0], [17.1, 39.0], [17.2, 39.0], [17.3, 39.0], [17.4, 39.0], [17.5, 39.0], [17.6, 40.0], [17.7, 40.0], [17.8, 40.0], [17.9, 40.0], [18.0, 40.0], [18.1, 41.0], [18.2, 41.0], [18.3, 41.0], [18.4, 41.0], [18.5, 41.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 43.0], [19.5, 43.0], [19.6, 43.0], [19.7, 43.0], [19.8, 44.0], [19.9, 44.0], [20.0, 44.0], [20.1, 45.0], [20.2, 45.0], [20.3, 45.0], [20.4, 45.0], [20.5, 45.0], [20.6, 45.0], [20.7, 46.0], [20.8, 46.0], [20.9, 46.0], [21.0, 47.0], [21.1, 47.0], [21.2, 47.0], [21.3, 47.0], [21.4, 48.0], [21.5, 48.0], [21.6, 49.0], [21.7, 49.0], [21.8, 49.0], [21.9, 50.0], [22.0, 50.0], [22.1, 50.0], [22.2, 51.0], [22.3, 51.0], [22.4, 51.0], [22.5, 51.0], [22.6, 52.0], [22.7, 52.0], [22.8, 52.0], [22.9, 52.0], [23.0, 53.0], [23.1, 53.0], [23.2, 53.0], [23.3, 54.0], [23.4, 54.0], [23.5, 55.0], [23.6, 56.0], [23.7, 56.0], [23.8, 56.0], [23.9, 57.0], [24.0, 57.0], [24.1, 57.0], [24.2, 58.0], [24.3, 59.0], [24.4, 60.0], [24.5, 60.0], [24.6, 61.0], [24.7, 62.0], [24.8, 62.0], [24.9, 63.0], [25.0, 64.0], [25.1, 64.0], [25.2, 65.0], [25.3, 65.0], [25.4, 66.0], [25.5, 66.0], [25.6, 67.0], [25.7, 67.0], [25.8, 67.0], [25.9, 68.0], [26.0, 69.0], [26.1, 69.0], [26.2, 70.0], [26.3, 71.0], [26.4, 71.0], [26.5, 72.0], [26.6, 73.0], [26.7, 74.0], [26.8, 75.0], [26.9, 76.0], [27.0, 79.0], [27.1, 80.0], [27.2, 82.0], [27.3, 83.0], [27.4, 84.0], [27.5, 85.0], [27.6, 86.0], [27.7, 87.0], [27.8, 88.0], [27.9, 89.0], [28.0, 90.0], [28.1, 91.0], [28.2, 92.0], [28.3, 92.0], [28.4, 93.0], [28.5, 94.0], [28.6, 94.0], [28.7, 95.0], [28.8, 95.0], [28.9, 96.0], [29.0, 97.0], [29.1, 97.0], [29.2, 98.0], [29.3, 98.0], [29.4, 99.0], [29.5, 99.0], [29.6, 100.0], [29.7, 101.0], [29.8, 101.0], [29.9, 102.0], [30.0, 103.0], [30.1, 104.0], [30.2, 104.0], [30.3, 105.0], [30.4, 106.0], [30.5, 107.0], [30.6, 108.0], [30.7, 109.0], [30.8, 109.0], [30.9, 110.0], [31.0, 111.0], [31.1, 112.0], [31.2, 113.0], [31.3, 114.0], [31.4, 114.0], [31.5, 116.0], [31.6, 116.0], [31.7, 117.0], [31.8, 119.0], [31.9, 120.0], [32.0, 120.0], [32.1, 121.0], [32.2, 122.0], [32.3, 123.0], [32.4, 123.0], [32.5, 124.0], [32.6, 125.0], [32.7, 126.0], [32.8, 127.0], [32.9, 129.0], [33.0, 132.0], [33.1, 134.0], [33.2, 135.0], [33.3, 136.0], [33.4, 136.0], [33.5, 137.0], [33.6, 140.0], [33.7, 142.0], [33.8, 144.0], [33.9, 146.0], [34.0, 148.0], [34.1, 149.0], [34.2, 151.0], [34.3, 154.0], [34.4, 154.0], [34.5, 155.0], [34.6, 156.0], [34.7, 157.0], [34.8, 159.0], [34.9, 161.0], [35.0, 163.0], [35.1, 166.0], [35.2, 168.0], [35.3, 172.0], [35.4, 173.0], [35.5, 175.0], [35.6, 177.0], [35.7, 178.0], [35.8, 181.0], [35.9, 183.0], [36.0, 184.0], [36.1, 187.0], [36.2, 188.0], [36.3, 191.0], [36.4, 192.0], [36.5, 194.0], [36.6, 196.0], [36.7, 198.0], [36.8, 198.0], [36.9, 199.0], [37.0, 202.0], [37.1, 203.0], [37.2, 205.0], [37.3, 207.0], [37.4, 209.0], [37.5, 210.0], [37.6, 213.0], [37.7, 214.0], [37.8, 217.0], [37.9, 222.0], [38.0, 224.0], [38.1, 227.0], [38.2, 237.0], [38.3, 242.0], [38.4, 247.0], [38.5, 250.0], [38.6, 258.0], [38.7, 264.0], [38.8, 269.0], [38.9, 271.0], [39.0, 274.0], [39.1, 276.0], [39.2, 278.0], [39.3, 279.0], [39.4, 280.0], [39.5, 283.0], [39.6, 285.0], [39.7, 286.0], [39.8, 287.0], [39.9, 289.0], [40.0, 290.0], [40.1, 293.0], [40.2, 294.0], [40.3, 295.0], [40.4, 298.0], [40.5, 299.0], [40.6, 301.0], [40.7, 301.0], [40.8, 304.0], [40.9, 306.0], [41.0, 308.0], [41.1, 311.0], [41.2, 318.0], [41.3, 319.0], [41.4, 324.0], [41.5, 325.0], [41.6, 327.0], [41.7, 330.0], [41.8, 334.0], [41.9, 339.0], [42.0, 342.0], [42.1, 343.0], [42.2, 345.0], [42.3, 345.0], [42.4, 347.0], [42.5, 351.0], [42.6, 353.0], [42.7, 354.0], [42.8, 355.0], [42.9, 360.0], [43.0, 362.0], [43.1, 364.0], [43.2, 366.0], [43.3, 367.0], [43.4, 369.0], [43.5, 370.0], [43.6, 372.0], [43.7, 375.0], [43.8, 376.0], [43.9, 378.0], [44.0, 379.0], [44.1, 382.0], [44.2, 383.0], [44.3, 385.0], [44.4, 386.0], [44.5, 390.0], [44.6, 393.0], [44.7, 395.0], [44.8, 399.0], [44.9, 400.0], [45.0, 402.0], [45.1, 406.0], [45.2, 407.0], [45.3, 409.0], [45.4, 411.0], [45.5, 413.0], [45.6, 413.0], [45.7, 414.0], [45.8, 417.0], [45.9, 418.0], [46.0, 418.0], [46.1, 419.0], [46.2, 421.0], [46.3, 422.0], [46.4, 423.0], [46.5, 424.0], [46.6, 426.0], [46.7, 430.0], [46.8, 432.0], [46.9, 434.0], [47.0, 434.0], [47.1, 435.0], [47.2, 438.0], [47.3, 439.0], [47.4, 440.0], [47.5, 443.0], [47.6, 444.0], [47.7, 446.0], [47.8, 449.0], [47.9, 451.0], [48.0, 455.0], [48.1, 458.0], [48.2, 459.0], [48.3, 460.0], [48.4, 461.0], [48.5, 462.0], [48.6, 463.0], [48.7, 464.0], [48.8, 465.0], [48.9, 468.0], [49.0, 470.0], [49.1, 471.0], [49.2, 472.0], [49.3, 476.0], [49.4, 478.0], [49.5, 481.0], [49.6, 483.0], [49.7, 485.0], [49.8, 487.0], [49.9, 488.0], [50.0, 490.0], [50.1, 492.0], [50.2, 494.0], [50.3, 499.0], [50.4, 502.0], [50.5, 505.0], [50.6, 508.0], [50.7, 509.0], [50.8, 510.0], [50.9, 516.0], [51.0, 520.0], [51.1, 525.0], [51.2, 530.0], [51.3, 533.0], [51.4, 534.0], [51.5, 539.0], [51.6, 546.0], [51.7, 550.0], [51.8, 561.0], [51.9, 564.0], [52.0, 569.0], [52.1, 579.0], [52.2, 581.0], [52.3, 584.0], [52.4, 594.0], [52.5, 597.0], [52.6, 603.0], [52.7, 605.0], [52.8, 611.0], [52.9, 622.0], [53.0, 629.0], [53.1, 632.0], [53.2, 640.0], [53.3, 650.0], [53.4, 653.0], [53.5, 654.0], [53.6, 655.0], [53.7, 660.0], [53.8, 664.0], [53.9, 665.0], [54.0, 667.0], [54.1, 669.0], [54.2, 671.0], [54.3, 674.0], [54.4, 676.0], [54.5, 678.0], [54.6, 680.0], [54.7, 682.0], [54.8, 684.0], [54.9, 684.0], [55.0, 686.0], [55.1, 687.0], [55.2, 687.0], [55.3, 690.0], [55.4, 692.0], [55.5, 693.0], [55.6, 695.0], [55.7, 695.0], [55.8, 696.0], [55.9, 696.0], [56.0, 696.0], [56.1, 697.0], [56.2, 697.0], [56.3, 698.0], [56.4, 699.0], [56.5, 699.0], [56.6, 700.0], [56.7, 700.0], [56.8, 701.0], [56.9, 701.0], [57.0, 702.0], [57.1, 702.0], [57.2, 703.0], [57.3, 703.0], [57.4, 704.0], [57.5, 705.0], [57.6, 706.0], [57.7, 706.0], [57.8, 707.0], [57.9, 709.0], [58.0, 711.0], [58.1, 713.0], [58.2, 714.0], [58.3, 715.0], [58.4, 717.0], [58.5, 719.0], [58.6, 721.0], [58.7, 722.0], [58.8, 726.0], [58.9, 730.0], [59.0, 733.0], [59.1, 738.0], [59.2, 746.0], [59.3, 748.0], [59.4, 749.0], [59.5, 751.0], [59.6, 751.0], [59.7, 751.0], [59.8, 752.0], [59.9, 752.0], [60.0, 753.0], [60.1, 754.0], [60.2, 757.0], [60.3, 759.0], [60.4, 762.0], [60.5, 765.0], [60.6, 767.0], [60.7, 773.0], [60.8, 775.0], [60.9, 778.0], [61.0, 780.0], [61.1, 787.0], [61.2, 795.0], [61.3, 801.0], [61.4, 805.0], [61.5, 809.0], [61.6, 812.0], [61.7, 813.0], [61.8, 816.0], [61.9, 818.0], [62.0, 820.0], [62.1, 822.0], [62.2, 824.0], [62.3, 826.0], [62.4, 829.0], [62.5, 831.0], [62.6, 832.0], [62.7, 833.0], [62.8, 834.0], [62.9, 834.0], [63.0, 834.0], [63.1, 835.0], [63.2, 835.0], [63.3, 836.0], [63.4, 837.0], [63.5, 839.0], [63.6, 840.0], [63.7, 840.0], [63.8, 841.0], [63.9, 842.0], [64.0, 843.0], [64.1, 844.0], [64.2, 845.0], [64.3, 846.0], [64.4, 848.0], [64.5, 851.0], [64.6, 855.0], [64.7, 856.0], [64.8, 859.0], [64.9, 862.0], [65.0, 865.0], [65.1, 867.0], [65.2, 872.0], [65.3, 876.0], [65.4, 877.0], [65.5, 882.0], [65.6, 885.0], [65.7, 888.0], [65.8, 894.0], [65.9, 897.0], [66.0, 898.0], [66.1, 900.0], [66.2, 902.0], [66.3, 903.0], [66.4, 905.0], [66.5, 907.0], [66.6, 910.0], [66.7, 917.0], [66.8, 920.0], [66.9, 927.0], [67.0, 933.0], [67.1, 940.0], [67.2, 947.0], [67.3, 949.0], [67.4, 950.0], [67.5, 956.0], [67.6, 957.0], [67.7, 959.0], [67.8, 960.0], [67.9, 962.0], [68.0, 964.0], [68.1, 966.0], [68.2, 969.0], [68.3, 971.0], [68.4, 972.0], [68.5, 972.0], [68.6, 975.0], [68.7, 975.0], [68.8, 976.0], [68.9, 977.0], [69.0, 978.0], [69.1, 980.0], [69.2, 981.0], [69.3, 983.0], [69.4, 985.0], [69.5, 985.0], [69.6, 988.0], [69.7, 989.0], [69.8, 990.0], [69.9, 992.0], [70.0, 993.0], [70.1, 995.0], [70.2, 996.0], [70.3, 997.0], [70.4, 1000.0], [70.5, 1001.0], [70.6, 1014.0], [70.7, 1019.0], [70.8, 1021.0], [70.9, 1021.0], [71.0, 1022.0], [71.1, 1026.0], [71.2, 1028.0], [71.3, 1032.0], [71.4, 1035.0], [71.5, 1037.0], [71.6, 1040.0], [71.7, 1042.0], [71.8, 1045.0], [71.9, 1049.0], [72.0, 1062.0], [72.1, 1067.0], [72.2, 1071.0], [72.3, 1073.0], [72.4, 1077.0], [72.5, 1080.0], [72.6, 1085.0], [72.7, 1096.0], [72.8, 1098.0], [72.9, 1098.0], [73.0, 1100.0], [73.1, 1101.0], [73.2, 1103.0], [73.3, 1105.0], [73.4, 1113.0], [73.5, 1121.0], [73.6, 1129.0], [73.7, 1131.0], [73.8, 1137.0], [73.9, 1138.0], [74.0, 1142.0], [74.1, 1147.0], [74.2, 1158.0], [74.3, 1181.0], [74.4, 1194.0], [74.5, 1203.0], [74.6, 1219.0], [74.7, 1234.0], [74.8, 1242.0], [74.9, 1270.0], [75.0, 1277.0], [75.1, 1286.0], [75.2, 1319.0], [75.3, 1337.0], [75.4, 1343.0], [75.5, 1358.0], [75.6, 1388.0], [75.7, 1401.0], [75.8, 1410.0], [75.9, 1417.0], [76.0, 1435.0], [76.1, 1452.0], [76.2, 1459.0], [76.3, 1477.0], [76.4, 1495.0], [76.5, 1507.0], [76.6, 1511.0], [76.7, 1523.0], [76.8, 1530.0], [76.9, 1533.0], [77.0, 1534.0], [77.1, 1536.0], [77.2, 1540.0], [77.3, 1543.0], [77.4, 1544.0], [77.5, 1546.0], [77.6, 1546.0], [77.7, 1547.0], [77.8, 1552.0], [77.9, 1553.0], [78.0, 1555.0], [78.1, 1561.0], [78.2, 1563.0], [78.3, 1564.0], [78.4, 1566.0], [78.5, 1570.0], [78.6, 1571.0], [78.7, 1573.0], [78.8, 1579.0], [78.9, 1582.0], [79.0, 1586.0], [79.1, 1588.0], [79.2, 1592.0], [79.3, 1593.0], [79.4, 1595.0], [79.5, 1599.0], [79.6, 1606.0], [79.7, 1608.0], [79.8, 1613.0], [79.9, 1620.0], [80.0, 1621.0], [80.1, 1624.0], [80.2, 1627.0], [80.3, 1630.0], [80.4, 1633.0], [80.5, 1637.0], [80.6, 1639.0], [80.7, 1642.0], [80.8, 1644.0], [80.9, 1647.0], [81.0, 1650.0], [81.1, 1653.0], [81.2, 1655.0], [81.3, 1655.0], [81.4, 1657.0], [81.5, 1658.0], [81.6, 1660.0], [81.7, 1661.0], [81.8, 1663.0], [81.9, 1665.0], [82.0, 1666.0], [82.1, 1671.0], [82.2, 1672.0], [82.3, 1674.0], [82.4, 1675.0], [82.5, 1677.0], [82.6, 1677.0], [82.7, 1678.0], [82.8, 1678.0], [82.9, 1680.0], [83.0, 1680.0], [83.1, 1681.0], [83.2, 1682.0], [83.3, 1683.0], [83.4, 1684.0], [83.5, 1684.0], [83.6, 1686.0], [83.7, 1688.0], [83.8, 1689.0], [83.9, 1690.0], [84.0, 1692.0], [84.1, 1694.0], [84.2, 1698.0], [84.3, 1703.0], [84.4, 1714.0], [84.5, 1726.0], [84.6, 1730.0], [84.7, 1736.0], [84.8, 1740.0], [84.9, 1746.0], [85.0, 1799.0], [85.1, 1836.0], [85.2, 1849.0], [85.3, 1871.0], [85.4, 1876.0], [85.5, 1896.0], [85.6, 1906.0], [85.7, 1913.0], [85.8, 1919.0], [85.9, 1925.0], [86.0, 1931.0], [86.1, 1940.0], [86.2, 1949.0], [86.3, 1966.0], [86.4, 1977.0], [86.5, 1983.0], [86.6, 1986.0], [86.7, 2024.0], [86.8, 2032.0], [86.9, 2060.0], [87.0, 2075.0], [87.1, 2086.0], [87.2, 2096.0], [87.3, 2135.0], [87.4, 2156.0], [87.5, 2196.0], [87.6, 2208.0], [87.7, 2233.0], [87.8, 2278.0], [87.9, 2356.0], [88.0, 2421.0], [88.1, 2641.0], [88.2, 2743.0], [88.3, 2751.0], [88.4, 2762.0], [88.5, 2782.0], [88.6, 2842.0], [88.7, 2853.0], [88.8, 2859.0], [88.9, 2889.0], [89.0, 2894.0], [89.1, 2981.0], [89.2, 3036.0], [89.3, 3056.0], [89.4, 3085.0], [89.5, 3093.0], [89.6, 3103.0], [89.7, 3113.0], [89.8, 3125.0], [89.9, 3144.0], [90.0, 3297.0], [90.1, 3408.0], [90.2, 3579.0], [90.3, 3980.0], [90.4, 4075.0], [90.5, 4169.0], [90.6, 4231.0], [90.7, 4243.0], [90.8, 4392.0], [90.9, 4512.0], [91.0, 4556.0], [91.1, 4643.0], [91.2, 4738.0], [91.3, 4791.0], [91.4, 5105.0], [91.5, 5160.0], [91.6, 5219.0], [91.7, 5271.0], [91.8, 5306.0], [91.9, 5351.0], [92.0, 5459.0], [92.1, 5499.0], [92.2, 5567.0], [92.3, 5791.0], [92.4, 5911.0], [92.5, 5958.0], [92.6, 6053.0], [92.7, 6077.0], [92.8, 6093.0], [92.9, 6132.0], [93.0, 6190.0], [93.1, 6216.0], [93.2, 6236.0], [93.3, 6304.0], [93.4, 6326.0], [93.5, 6359.0], [93.6, 6378.0], [93.7, 6421.0], [93.8, 6447.0], [93.9, 6466.0], [94.0, 6554.0], [94.1, 6609.0], [94.2, 6678.0], [94.3, 6812.0], [94.4, 6872.0], [94.5, 6928.0], [94.6, 6949.0], [94.7, 7008.0], [94.8, 7029.0], [94.9, 7072.0], [95.0, 7095.0], [95.1, 7134.0], [95.2, 7202.0], [95.3, 7212.0], [95.4, 7217.0], [95.5, 7253.0], [95.6, 7314.0], [95.7, 7336.0], [95.8, 7350.0], [95.9, 7367.0], [96.0, 7384.0], [96.1, 7421.0], [96.2, 7441.0], [96.3, 7748.0], [96.4, 7850.0], [96.5, 7940.0], [96.6, 7961.0], [96.7, 7971.0], [96.8, 7984.0], [96.9, 7998.0], [97.0, 8030.0], [97.1, 8057.0], [97.2, 8075.0], [97.3, 8097.0], [97.4, 8121.0], [97.5, 8152.0], [97.6, 8161.0], [97.7, 8170.0], [97.8, 8207.0], [97.9, 8301.0], [98.0, 8634.0], [98.1, 8709.0], [98.2, 8777.0], [98.3, 8819.0], [98.4, 8875.0], [98.5, 8967.0], [98.6, 9000.0], [98.7, 9250.0], [98.8, 9827.0], [98.9, 9971.0], [99.0, 10043.0], [99.1, 10129.0], [99.2, 10185.0], [99.3, 10296.0], [99.4, 10412.0], [99.5, 10757.0], [99.6, 11405.0], [99.7, 11541.0], [99.8, 11618.0], [99.9, 11653.0], [100.0, 12232.0]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 1184.0, "series": [{"data": [[0.0, 1184.0], [100.0, 293.0], [200.0, 145.0], [300.0, 172.0], [400.0, 219.0], [500.0, 90.0], [600.0, 160.0], [700.0, 188.0], [800.0, 193.0], [900.0, 172.0], [1000.0, 103.0], [1100.0, 60.0], [1200.0, 27.0], [1300.0, 21.0], [1400.0, 31.0], [1500.0, 122.0], [1600.0, 188.0], [1700.0, 32.0], [1800.0, 21.0], [1900.0, 43.0], [2000.0, 24.0], [2100.0, 13.0], [2200.0, 12.0], [2300.0, 6.0], [2400.0, 2.0], [2600.0, 6.0], [2700.0, 13.0], [2800.0, 20.0], [2900.0, 7.0], [3000.0, 16.0], [3100.0, 16.0], [3300.0, 2.0], [3200.0, 1.0], [3400.0, 4.0], [3500.0, 2.0], [3600.0, 1.0], [3900.0, 5.0], [4000.0, 3.0], [4200.0, 7.0], [4300.0, 3.0], [4100.0, 5.0], [4500.0, 9.0], [4400.0, 2.0], [4600.0, 1.0], [4700.0, 8.0], [5100.0, 9.0], [4900.0, 1.0], [5000.0, 1.0], [5200.0, 8.0], [5300.0, 7.0], [5400.0, 6.0], [5500.0, 5.0], [5700.0, 3.0], [5800.0, 3.0], [6000.0, 13.0], [6100.0, 8.0], [5900.0, 5.0], [6200.0, 10.0], [6300.0, 13.0], [6400.0, 13.0], [6500.0, 5.0], [6600.0, 8.0], [6800.0, 8.0], [6900.0, 9.0], [7100.0, 7.0], [7000.0, 13.0], [7200.0, 16.0], [7300.0, 18.0], [7400.0, 9.0], [7500.0, 1.0], [7700.0, 4.0], [7900.0, 19.0], [7800.0, 2.0], [8000.0, 16.0], [8100.0, 18.0], [8700.0, 7.0], [8600.0, 5.0], [8500.0, 2.0], [8200.0, 5.0], [8300.0, 1.0], [9000.0, 2.0], [8800.0, 7.0], [8900.0, 6.0], [9200.0, 2.0], [9100.0, 1.0], [9300.0, 1.0], [9700.0, 1.0], [9400.0, 1.0], [10000.0, 6.0], [10100.0, 8.0], [10200.0, 2.0], [9800.0, 3.0], [9900.0, 2.0], [10300.0, 3.0], [10400.0, 1.0], [10600.0, 1.0], [10700.0, 6.0], [11400.0, 3.0], [11500.0, 2.0], [11600.0, 9.0], [11700.0, 2.0], [12200.0, 1.0]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 941.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2013.0, "series": [{"data": [[0.0, 2013.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 1046.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 941.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 84.16320324379124, "minX": 1.76053194E12, "maxY": 465.3601381351736, "series": [{"data": [[1.760532E12, 84.16320324379124], [1.76053194E12, 465.3601381351736]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.760532E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0625, "minX": 1.0, "maxY": 10918.5, "series": [{"data": [[2.0, 7.333333333333333], [3.0, 9.636363636363637], [4.0, 12.23529411764706], [5.0, 12.842105263157894], [6.0, 15.340909090909093], [7.0, 18.103448275862075], [8.0, 20.42857142857143], [9.0, 21.73584905660378], [10.0, 25.692307692307693], [11.0, 32.55000000000001], [12.0, 42.1951219512195], [13.0, 64.97674418604652], [14.0, 49.028571428571425], [15.0, 84.64444444444445], [16.0, 99.51515151515153], [17.0, 93.0], [18.0, 48.21739130434782], [19.0, 48.625], [20.0, 59.666666666666664], [21.0, 71.0], [22.0, 72.0], [23.0, 99.36363636363636], [24.0, 106.33333333333334], [25.0, 124.44444444444444], [26.0, 123.25], [27.0, 189.31250000000003], [28.0, 80.68], [29.0, 130.08695652173913], [30.0, 199.72], [31.0, 92.11111111111111], [33.0, 258.1764705882353], [32.0, 617.0769230769232], [35.0, 202.69230769230768], [34.0, 322.08333333333337], [37.0, 135.05555555555554], [36.0, 266.125], [39.0, 103.61904761904762], [38.0, 157.5], [41.0, 183.45454545454547], [40.0, 109.19047619047619], [43.0, 148.84615384615387], [42.0, 126.65217391304347], [45.0, 428.57142857142856], [44.0, 330.0], [47.0, 612.5454545454545], [46.0, 338.33333333333337], [49.0, 56.0], [48.0, 542.8], [51.0, 1035.25], [50.0, 41.0], [53.0, 589.75], [52.0, 324.625], [55.0, 53.0], [54.0, 56.0], [57.0, 59.0], [56.0, 57.0], [59.0, 52.5], [58.0, 61.0], [61.0, 68.0], [60.0, 53.0], [63.0, 62.0], [62.0, 52.5], [67.0, 48.5], [66.0, 724.3333333333333], [65.0, 57.0], [64.0, 61.0], [71.0, 42.0], [70.0, 234.2], [69.0, 41.5], [68.0, 641.6], [75.0, 877.0], [74.0, 281.85714285714283], [73.0, 217.4], [72.0, 271.25], [79.0, 560.8571428571428], [78.0, 588.7], [77.0, 608.0], [76.0, 580.0], [82.0, 214.75], [83.0, 41.666666666666664], [81.0, 29.5], [80.0, 443.5], [87.0, 57.0], [86.0, 128.66666666666663], [91.0, 339.00000000000006], [90.0, 46.0], [89.0, 35.0], [88.0, 46.0], [95.0, 60.666666666666664], [94.0, 354.5], [93.0, 135.0], [92.0, 40.666666666666664], [99.0, 66.0], [98.0, 65.0], [97.0, 258.6666666666667], [96.0, 179.4], [103.0, 66.0], [102.0, 93.0], [101.0, 92.0], [100.0, 64.0], [106.0, 370.27272727272725], [107.0, 469.57142857142856], [105.0, 291.2], [104.0, 66.0], [111.0, 483.0], [110.0, 152.5], [109.0, 284.0], [108.0, 209.66666666666666], [115.0, 501.0], [114.0, 50.0], [113.0, 489.0], [112.0, 47.0], [119.0, 471.0], [118.0, 485.0], [117.0, 494.0], [116.0, 50.0], [123.0, 438.0], [122.0, 466.3333333333333], [121.0, 480.0], [120.0, 486.0], [127.0, 42.5], [126.0, 47.0], [125.0, 37.0], [124.0, 432.0], [135.0, 355.0], [134.0, 34.0], [133.0, 37.0], [132.0, 39.0], [131.0, 39.0], [130.0, 33.0], [129.0, 41.0], [128.0, 36.0], [143.0, 512.5], [142.0, 637.0], [141.0, 523.3333333333334], [140.0, 37.0], [139.0, 400.0], [138.0, 976.0], [137.0, 35.5], [136.0, 672.0], [151.0, 35.0], [150.0, 704.75], [149.0, 756.3333333333334], [148.0, 635.5], [147.0, 629.0], [146.0, 27.0], [145.0, 34.0], [144.0, 406.0], [159.0, 322.0], [158.0, 300.0], [157.0, 270.0], [156.0, 489.5], [155.0, 325.3333333333333], [154.0, 698.0], [153.0, 283.2857142857143], [152.0, 186.5], [167.0, 598.5], [166.0, 296.0], [165.0, 319.0], [164.0, 308.0], [163.0, 306.0], [162.0, 600.0], [161.0, 312.0], [160.0, 262.0], [175.0, 345.5], [174.0, 290.0], [173.0, 289.0], [172.0, 285.0], [171.0, 321.0], [170.0, 295.0], [169.0, 293.0], [168.0, 308.0], [183.0, 1263.3333333333333], [182.0, 1330.0], [181.0, 1153.6363636363637], [180.0, 588.5], [179.0, 291.5], [178.0, 303.0], [177.0, 347.0], [176.0, 343.0], [191.0, 1038.8333333333333], [190.0, 1021.4285714285713], [188.0, 1113.5], [187.0, 978.3333333333334], [186.0, 1124.5], [185.0, 1129.5], [184.0, 1127.5], [189.0, 694.0], [199.0, 1239.4545454545455], [198.0, 1270.8947368421057], [197.0, 1209.3846153846155], [196.0, 1130.9], [195.0, 957.952380952381], [194.0, 871.2727272727274], [193.0, 1255.6666666666667], [192.0, 1087.0], [207.0, 1175.214285714286], [206.0, 1204.0], [205.0, 1043.5454545454545], [204.0, 1274.1000000000001], [203.0, 1057.6666666666667], [202.0, 1092.625], [201.0, 1029.7142857142858], [200.0, 1014.6666666666666], [215.0, 1209.1666666666667], [214.0, 1102.5624999999998], [213.0, 1136.1538461538464], [212.0, 1321.6666666666667], [211.0, 1145.5833333333335], [210.0, 1506.92], [209.0, 1296.2142857142858], [208.0, 1413.4000000000003], [223.0, 900.1666666666666], [222.0, 1429.3333333333335], [221.0, 1436.142857142857], [220.0, 1558.4375], [219.0, 1457.5333333333335], [218.0, 888.75], [217.0, 946.8571428571428], [216.0, 1186.3333333333333], [231.0, 1055.8], [230.0, 1314.0588235294115], [229.0, 1130.3999999999999], [228.0, 1097.25], [227.0, 1595.5625], [224.0, 1037.3333333333333], [226.0, 696.0], [225.0, 703.5], [239.0, 1035.857142857143], [238.0, 1321.9199999999998], [237.0, 1371.2], [236.0, 990.8571428571428], [235.0, 1220.6666666666665], [234.0, 1055.6], [233.0, 1058.6], [232.0, 1086.0], [247.0, 952.4444444444443], [246.0, 1014.8095238095239], [245.0, 1081.3333333333335], [244.0, 1001.1818181818181], [243.0, 1072.5], [242.0, 1061.7142857142856], [241.0, 1029.6499999999999], [240.0, 1034.1999999999998], [255.0, 995.4444444444442], [254.0, 1114.4666666666667], [253.0, 1104.5], [252.0, 1042.0], [251.0, 1062.6153846153848], [250.0, 1139.5], [249.0, 1148.4285714285713], [248.0, 1205.5492957746476], [259.0, 1146.0], [271.0, 1718.0], [269.0, 941.5833333333333], [270.0, 751.0], [268.0, 780.3333333333334], [267.0, 1082.142857142857], [266.0, 946.5555555555555], [265.0, 1127.0], [264.0, 761.3076923076924], [263.0, 1181.8], [262.0, 1139.5], [261.0, 1327.0], [260.0, 1506.5], [258.0, 1037.7037037037035], [257.0, 1352.25], [256.0, 1118.9333333333336], [284.0, 1044.0], [286.0, 937.0], [282.0, 1405.8333333333335], [278.0, 1114.25], [285.0, 1046.5], [283.0, 1054.5], [280.0, 1683.0], [279.0, 1872.0], [272.0, 761.0], [274.0, 1460.3333333333333], [275.0, 751.0], [273.0, 1138.3333333333333], [277.0, 1223.0], [276.0, 1526.3333333333333], [303.0, 759.0], [301.0, 753.125], [296.0, 753.0], [295.0, 780.0], [317.0, 745.0], [315.0, 746.0], [313.0, 776.0], [312.0, 765.0], [311.0, 763.0], [305.0, 749.0], [304.0, 750.0], [310.0, 760.5], [309.0, 776.0], [307.0, 767.0], [306.0, 777.0], [333.0, 749.6666666666666], [331.0, 751.0], [330.0, 749.0], [329.0, 751.0], [324.0, 748.0], [321.0, 757.0], [350.0, 418.0], [348.0, 555.0], [347.0, 529.5], [345.0, 465.75], [344.0, 504.85714285714295], [343.0, 648.3333333333334], [342.0, 695.0], [351.0, 636.0], [349.0, 640.0], [346.0, 669.0], [365.0, 469.5], [366.0, 503.0], [367.0, 583.0], [364.0, 475.5], [355.0, 622.0], [354.0, 629.0], [353.0, 625.0], [352.0, 632.0], [363.0, 482.5], [362.0, 528.3333333333334], [361.0, 438.25], [360.0, 482.5], [359.0, 369.0], [358.0, 365.0], [356.0, 524.0], [357.0, 617.0], [376.0, 407.5], [375.0, 411.0], [374.0, 413.0], [372.0, 413.0], [371.0, 346.0], [370.0, 503.3333333333333], [369.0, 453.25], [368.0, 605.0], [397.0, 123.0], [393.0, 124.0], [396.0, 75.0], [394.0, 189.00000000000003], [398.0, 151.42857142857142], [395.0, 192.0], [392.0, 180.0], [399.0, 233.7142857142857], [391.0, 269.0], [390.0, 302.3333333333333], [389.0, 417.0], [388.0, 417.0], [412.0, 220.5], [414.0, 149.0], [415.0, 191.5], [408.0, 293.4], [409.0, 534.2], [413.0, 154.0], [411.0, 268.7142857142857], [410.0, 321.5], [405.0, 57.125], [406.0, 126.9], [407.0, 272.5], [401.0, 184.1818181818182], [400.0, 273.1818181818182], [403.0, 257.375], [402.0, 247.14285714285714], [404.0, 157.0], [423.0, 148.0], [426.0, 155.0], [422.0, 177.79999999999998], [421.0, 171.0], [420.0, 146.0], [419.0, 191.0], [418.0, 172.33333333333334], [417.0, 196.5], [416.0, 198.0], [437.0, 4000.0], [440.0, 1538.0], [447.0, 60.5], [443.0, 56.0], [442.0, 56.5], [441.0, 62.0], [439.0, 60.4], [435.0, 85.0], [452.0, 4149.333333333333], [459.0, 2226.0], [461.0, 4426.0], [463.0, 154.0], [462.0, 46.0], [454.0, 52.0], [476.0, 3787.0263157894738], [464.0, 3309.0], [467.0, 1618.6250000000002], [465.0, 49.0], [468.0, 4731.0], [470.0, 2515.5], [471.0, 2506.5], [479.0, 378.0], [472.0, 325.5], [473.0, 280.6666666666667], [475.0, 705.0], [474.0, 287.0], [478.0, 410.0], [477.0, 463.0], [493.0, 3740.2], [482.0, 3353.0], [483.0, 2351.5], [487.0, 4933.25], [480.0, 618.0], [486.0, 562.0], [485.0, 589.0], [484.0, 522.0], [489.0, 3359.0], [495.0, 3409.5], [488.0, 497.0], [492.0, 1911.25], [491.0, 6132.0], [490.0, 499.0], [494.0, 463.0], [508.0, 2677.0], [497.0, 5696.227272727273], [496.0, 5080.0], [498.0, 4410.0], [499.0, 489.0], [509.0, 2839.2], [510.0, 2938.25], [511.0, 2333.0], [501.0, 3378.5], [500.0, 477.0], [502.0, 457.75], [503.0, 3379.0], [504.0, 3176.5], [505.0, 1935.5], [506.0, 4032.333333333333], [507.0, 3421.333333333333], [517.0, 4969.0], [512.0, 2390.3333333333335], [527.0, 3531.5], [526.0, 199.0], [525.0, 220.0], [524.0, 1647.5], [523.0, 201.0], [522.0, 198.0], [521.0, 3273.666666666667], [520.0, 2368.2], [514.0, 4564.0], [516.0, 6247.0], [518.0, 5334.099999999999], [519.0, 225.0], [537.0, 5393.578947368422], [538.0, 6296.666666666667], [536.0, 5403.529411764706], [542.0, 3713.5], [528.0, 191.0], [543.0, 4194.0], [530.0, 2455.5], [529.0, 190.0], [533.0, 2401.0], [531.0, 209.0], [535.0, 410.0], [534.0, 196.0], [541.0, 4957.3076923076915], [540.0, 5977.0], [539.0, 4328.0], [572.0, 1373.0], [564.0, 2716.0], [573.0, 1561.9166666666667], [575.0, 1336.6666666666667], [561.0, 720.0], [560.0, 5674.090909090909], [563.0, 5445.181818181818], [562.0, 4107.5], [571.0, 2237.5], [570.0, 2517.6363636363635], [569.0, 703.0], [568.0, 1721.0], [551.0, 3087.0], [549.0, 4014.0], [558.0, 2408.0], [557.0, 6370.0], [556.0, 4636.25], [555.0, 5102.0], [554.0, 5094.777777777777], [553.0, 7295.4], [552.0, 7320.0], [559.0, 6437.5], [545.0, 192.0], [547.0, 4122.0], [546.0, 5455.75], [544.0, 2151.3333333333335], [548.0, 3588.5], [567.0, 1464.5], [566.0, 2516.7999999999997], [565.0, 700.0], [600.0, 373.0], [594.0, 2408.55], [604.0, 154.63636363636363], [605.0, 417.0], [606.0, 411.0], [593.0, 1189.0], [592.0, 3072.6666666666665], [599.0, 426.409090909091], [596.0, 4362.437500000001], [595.0, 3238.5866666666666], [603.0, 398.0], [601.0, 382.0], [591.0, 972.0], [590.0, 4202.517241379311], [580.0, 1944.4], [579.0, 1627.5], [578.0, 1630.0], [576.0, 1603.0], [582.0, 1876.0833333333333], [581.0, 370.0], [589.0, 1334.8], [588.0, 1447.1818181818182], [587.0, 2034.7777777777778], [584.0, 1096.0], [586.0, 1593.0], [585.0, 1608.5333333333333], [598.0, 589.0], [634.0, 708.5357142857143], [626.0, 242.33333333333331], [638.0, 2619.0], [635.0, 4595.280000000001], [637.0, 476.5], [636.0, 2201.916666666667], [639.0, 4865.249999999999], [625.0, 2693.9999999999995], [624.0, 1976.0], [633.0, 1258.7272727272727], [632.0, 885.7391304347827], [615.0, 2569.75], [613.0, 3236.6000000000004], [612.0, 432.0], [614.0, 511.0], [610.0, 43.33333333333333], [623.0, 518.5], [609.0, 457.0], [608.0, 442.5], [622.0, 2563.7105263157896], [621.0, 252.0], [620.0, 509.0], [619.0, 481.0], [618.0, 146.5], [616.0, 231.0], [617.0, 650.0], [629.0, 4256.714285714286], [631.0, 2032.0], [630.0, 112.8], [628.0, 249.66666666666669], [627.0, 178.66666666666666], [642.0, 7320.631578947368], [647.0, 5145.285714285715], [665.0, 356.3333333333333], [664.0, 371.3333333333333], [666.0, 314.2], [667.0, 364.5], [656.0, 6237.75], [658.0, 4233.125], [657.0, 459.0], [659.0, 408.5], [660.0, 2655.6], [663.0, 350.0], [662.0, 362.3333333333333], [661.0, 371.0], [648.0, 2768.9180327868853], [649.0, 7112.833333333334], [653.0, 3691.222222222222], [654.0, 10918.5], [655.0, 2964.0], [652.0, 5227.166666666667], [641.0, 3143.25], [640.0, 387.0], [651.0, 373.7142857142857], [650.0, 5959.75], [646.0, 365.6666666666667], [645.0, 318.5], [644.0, 311.5], [643.0, 2431.6], [1.0, 5.0625]], "isOverall": false, "label": "Submit Form", "isController": false}, {"data": [[277.3349999999985, 1271.9062499999964]], "isOverall": false, "label": "Submit Form-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 667.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 9207.333333333334, "minX": 1.76053194E12, "maxY": 9999.866666666667, "series": [{"data": [[1.760532E12, 9207.333333333334], [1.76053194E12, 9459.333333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.760532E12, 9733.466666666667], [1.76053194E12, 9999.866666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.760532E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 323.9183983781046, "minX": 1.76053194E12, "maxY": 2194.63936852491, "series": [{"data": [[1.760532E12, 323.9183983781046], [1.76053194E12, 2194.63936852491]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.760532E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 323.7247845919928, "minX": 1.76053194E12, "maxY": 2192.7025160335456, "series": [{"data": [[1.760532E12, 323.7247845919928], [1.76053194E12, 2192.7025160335456]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.760532E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 1.380638621388746, "minX": 1.76053194E12, "maxY": 148.0197335964482, "series": [{"data": [[1.760532E12, 1.380638621388746], [1.76053194E12, 148.0197335964482]], "isOverall": false, "label": "Submit Form", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.760532E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.76053194E12, "maxY": 12232.0, "series": [{"data": [[1.760532E12, 1727.0], [1.76053194E12, 12232.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.760532E12, 971.0], [1.76053194E12, 7082.400000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.760532E12, 1465.8999999999999], [1.76053194E12, 10759.880000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.760532E12, 1093.3], [1.76053194E12, 8143.999999999998]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.760532E12, 1.0], [1.76053194E12, 5.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.760532E12, 83.0], [1.76053194E12, 1067.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.760532E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 6.0, "maxY": 7158.0, "series": [{"data": [[138.0, 1034.5], [153.0, 137.0], [162.0, 460.0], [175.0, 409.0], [178.0, 123.0], [190.0, 6120.0], [184.0, 436.5], [12.0, 1043.0], [53.0, 465.0], [64.0, 23.0], [17.0, 4340.0], [287.0, 22.0], [301.0, 46.0], [78.0, 7158.0], [334.0, 1592.0], [324.0, 956.5], [85.0, 5176.0], [343.0, 1679.0], [374.0, 42.0], [6.0, 4000.0], [97.0, 850.0], [445.0, 554.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 445.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 22.0, "minX": 6.0, "maxY": 7158.0, "series": [{"data": [[138.0, 1034.0], [153.0, 137.0], [162.0, 460.0], [175.0, 409.0], [178.0, 123.0], [190.0, 6120.0], [184.0, 436.5], [12.0, 1043.0], [53.0, 465.0], [64.0, 23.0], [17.0, 4340.0], [287.0, 22.0], [301.0, 46.0], [78.0, 7158.0], [334.0, 1592.0], [324.0, 956.5], [85.0, 5175.0], [343.0, 1679.0], [374.0, 42.0], [6.0, 3939.0], [97.0, 849.0], [445.0, 554.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 445.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.716666666666665, "minX": 1.76053194E12, "maxY": 37.95, "series": [{"data": [[1.760532E12, 28.716666666666665], [1.76053194E12, 37.95]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.760532E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 32.88333333333333, "minX": 1.76053194E12, "maxY": 33.78333333333333, "series": [{"data": [[1.760532E12, 32.88333333333333], [1.76053194E12, 33.78333333333333]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.760532E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 32.88333333333333, "minX": 1.76053194E12, "maxY": 33.78333333333333, "series": [{"data": [[1.760532E12, 32.88333333333333], [1.76053194E12, 33.78333333333333]], "isOverall": false, "label": "Submit Form-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.760532E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 32.88333333333333, "minX": 1.76053194E12, "maxY": 33.78333333333333, "series": [{"data": [[1.760532E12, 32.88333333333333], [1.76053194E12, 33.78333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.760532E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 7200000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

